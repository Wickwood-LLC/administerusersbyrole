<?php
// $Id$

/**
 * @file
 * Allows users with 'administer users' permission and a role (specified in 'Permissions') to edit/delete other users with a specified role.  If the user being edited has multiple roles, the user doing the editing must have permission to edit ALL of the user being edited's roles.  Also provides control over user creation.  Works well in conjunction with <a href='http://drupal.org/project/role_delegation'>role_delegation</a>.
 */
 


/**
  * Implements hook_permission().
  */
function administerusersbyrole_permission() {
  $roles = db_query('SELECT name FROM {role} WHERE rid > 1 ORDER BY name')->fetchAll();
  $perms = array();
  $perms['create users'] = array('title' => 'Create new users');
  foreach ($roles as &$role) {
    $perms['edit users with role '. $role->name] = array('title' => 'Edit users that have the role '. $role->name);
    $perms['delete users with role '. $role->name] = array('title' => 'Delete users that have the role '. $role->name);
  }
  return $perms;
}

/**
 * Implements hook_menu_alter().
 */
function administerusersbyrole_menu_alter(&$items) {
  $items['user/%user/edit']['access callback'] = '_administerusersbyrole_can_edit_user';
  $items['user/%user/delete']['access callback'] = '_administerusersbyrole_can_delete_user';
  $items['admin/people/create']['access arguments'] = array('create users');
}

/**
  * Implements hook_init().
  */
function administerusersbyrole_init() {
  if (arg(0)==='admin' && arg(1)==='user' && arg(2)==='people' && arg(3)==='create') {
    if (!user_access('create users')) {
      drupal_set_message(t('You do not have permission to create users.'), 'error');
      drupal_goto("");
    }
  }
  else if (arg(0)==='user') {
    switch (arg(2)) {
      case 'edit':
        $uid = arg(1);
        $account = user_load($uid);

        if (!_administerusersbyrole_can_edit_user($account)) {
          drupal_set_message(t('You do not have permission to edit %user.', array('%user' => $account->name)), 'error');
          drupal_goto('user/'. $account->uid);
        }
        break;

      case 'delete':
        $uid = arg(1);
        $account = user_load($uid);

        if (!_administerusersbyrole_can_delete_user($account)) {
          drupal_set_message(t('You do not have permission to delete %user.', array('%user' => $account->name)), 'error');
          drupal_goto('user/'. $account->uid);
        }

        break;
    }
  }
}

function _administerusersbyrole_can_edit_user($account) {
  global $user;
  if ($account->uid == $user->uid) {
    return TRUE;
  }

  // allow only uid1 to edit uid1
  if ($account->uid == 1) {
    return FALSE;
  }
  
  $permitted = TRUE;
  foreach ($account->roles as $rid => $role) {
    $permitted = $permitted && user_access('edit users with role '. $role);
  }
  return $permitted;
}

function _administerusersbyrole_can_delete_user($account) {
  if ($account->uid == 1) {
    return FALSE;
  }
  $permitted = TRUE;
  foreach ($account->roles as $rid => $role) {
    $permitted = $permitted && user_access('delete users with role '. $role);
  }
  return $permitted;
}

function administerusersbyrole_form_user_multiple_cancel_confirm_alter(&$form, &$form_state) {
  $anyallowed = FALSE;
  foreach (array_filter($form_state['input']['accounts']) as $uid) {
    $account = user_load($uid);
    if (_administerusersbyrole_can_delete_user($account)) {
      $anyallowed = TRUE;
    }
    else {
      drupal_set_message(t('You do not have permission to delete %user.', array('%user' => $account->name)), 'error');
      unset($form_state['post']['accounts'][$uid]);
      unset($form['accounts'][$uid]);
    }
  }
  if (!$anyallowed) {
    drupal_goto( substr($form['#action'], 1) );
  }
}

/**
  * Implements hook_user_update().
  */
function administerusersbyrole_user_update(&$edit, $account, $category) {
  if ($category === 'account') {
    if (!_administerusersbyrole_can_edit_user($account)) {
      if (isset($edit['status'])) {
        $action = $edit['status'] ? t('unblock') : t('block');
        drupal_set_message(t('You do not have permission to !action %user.', array('!action' => $action, '%user' => $account->name)), 'error');
        unset($edit['status']);
      }
    }
  }
}
